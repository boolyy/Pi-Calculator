{"version":3,"sources":["Components/PlotlyComponent.js","Components/Value.js","App.js","serviceWorker.js","Components/PlotlyComp.js","index.js"],"names":["PlotlyComponent","props","state","x","y","updating","datarevision","genX","bind","genY","genPoints","Math","random","this","push","setState","prevState","console","log","setInterval","revision","data","type","layout","xaxis","range","zeroline","yaxis","width","height","title","shapes","xref","yref","x0","y0","x1","y1","React","Component","Value","inSquarePoints","inCirclePoints","toPrecision","Boolean","window","location","hostname","match","PlotlyComp","generating","hoverMode","toggleGen","randX","randY","inCircle","xCord","yCord","xDiff","yDiff","sqrt","className","onClick","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.432c8a0c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nexport default class PlotlyComponent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      x: [],\r\n      y: [],\r\n      updating: false,\r\n      datarevision: 0,\r\n    };\r\n    this.genX = this.genX.bind(this);\r\n    this.genY = this.genY.bind(this);\r\n    this.genPoints = this.genPoints.bind(this);\r\n  }\r\n\r\n  genX() {\r\n    //generates a random x component\r\n    return Math.random() * 25;\r\n  }\r\n\r\n  genY() {\r\n    //generates a random y component\r\n    return Math.random() * 25;\r\n  }\r\n\r\n  genPoints() {\r\n    //will start adding random points to graph\r\n    this.state.x.push(this.genX()); //adds a random x cord\r\n    this.state.y.push(this.genY()); //adds a random y cord\r\n    this.state.updating = true;\r\n    this.setState((prevState) => ({\r\n      datarevision: prevState.datarevision + 1,\r\n    }));\r\n    console.log(\"x:\" + this.state.x);\r\n    console.log(\"y:\" + this.state.y);\r\n    console.log(this.state.datarevision);\r\n  }\r\n\r\n  componentDidMount() {\r\n    setInterval(this.genPoints(), 500);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Plot\r\n        revision={this.state.datarevision}\r\n        datarevision={this.state.datarevision}\r\n        data={[\r\n          {\r\n            x: this.state.x,\r\n            y: this.state.y,\r\n            type: \"pointcloud\",\r\n          },\r\n        ]}\r\n        layout={{\r\n          xaxis: {\r\n            range: [-0.1, 25.1],\r\n            zeroline: false,\r\n            revision: this.state.datarevision,\r\n            datarevision: this.state.datarevision,\r\n          },\r\n          yaxis: {\r\n            range: [-0.1, 25.1],\r\n            zeroline: false,\r\n          },\r\n          width: 700,\r\n          height: 700,\r\n          title: \"Calculating Pi using the Monte Carlo Method!\",\r\n          shapes: [\r\n            {\r\n              //this adds a circle\r\n              type: \"circle\",\r\n              xref: \"x\",\r\n              yref: \"y\",\r\n              x0: 0,\r\n              y0: 0,\r\n              x1: 25,\r\n              y1: 25,\r\n            },\r\n            //adds a square\r\n            {\r\n              type: \"square\",\r\n              xref: \"x\",\r\n              yref: \"y\",\r\n              x0: 0,\r\n              y0: 0,\r\n              x1: 25,\r\n              y1: 25,\r\n            },\r\n          ],\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Value(props) {\r\n  {\r\n    if (props.inSquarePoints != 0) {\r\n      return (\r\n        <h2>\r\n          Current Value of Pi:{\" \"}\r\n          {(4 * (props.inCirclePoints / props.inSquarePoints)).toPrecision(7)}\r\n        </h2>\r\n      );\r\n    } else {\r\n      return <h2>Current Value of Pi: Press Start to Calculate!</h2>;\r\n    }\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport PlotlyComponent from \"./Components/PlotlyComponent\";\nimport Value from \"./Components/Value\";\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      x: [2, 3, 4],\n      y: [2, 3, 4],\n      updating: false,\n      datarevision: 0,\n    };\n    this.genPoints = this.genPoints.bind(this);\n    this.genX = this.genX.bind(this);\n    this.genY = this.genY.bind(this);\n  }\n\n  genX() {\n    //generates a random x component\n    return Math.random() * 25;\n  }\n\n  genY() {\n    //generates a random y component\n    return Math.random() * 25;\n  }\n\n  genPoints() {\n    //will start adding random points to graph\n    this.state.x.push(this.genX()); //adds a random x cord\n    this.state.y.push(this.genY()); //adds a random y cord\n    this.state.updating = true;\n    this.setState((prevState) => ({\n      datarevision: prevState.datarevision + 1,\n    }));\n    console.log(\"x:\" + this.state.x);\n    console.log(\"y:\" + this.state.y);\n    console.log(this.state.datarevision);\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <button\n            onClick={() => {\n              this.genPoints();\n            }}\n          >\n            Start\n          </button>\n        </div>\n        <div className=\"center\">\n          <PlotlyComponent\n            datarevision={this.state.datarevision}\n            x={this.state.x}\n            y={this.state.y}\n            updating={this.state.updating}\n          />\n          <Value />\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\nimport Value from \"./Value\";\r\n\r\nexport default class PlotlyComp extends React.Component {\r\n  state = {\r\n    generating: false,\r\n    inCirclePoints: 0,\r\n    inSquarePoints: 0,\r\n    x: [],\r\n    y: [],\r\n    layout: {\r\n      hoverMode: false,\r\n      xaxis: {\r\n        range: [-0.1, 25.1],\r\n        zeroline: false,\r\n      },\r\n      yaxis: {\r\n        range: [-0.1, 25.1],\r\n        zeroline: false,\r\n      },\r\n      datarevision: 0,\r\n      shapes: [\r\n        {\r\n          //this adds a circle\r\n          type: \"circle\",\r\n          xref: \"x\",\r\n          yref: \"y\",\r\n          x0: 0,\r\n          y0: 0,\r\n          x1: 25,\r\n          y1: 25,\r\n        },\r\n        //adds a square\r\n        {\r\n          type: \"square\",\r\n          xref: \"x\",\r\n          yref: \"y\",\r\n          x0: 0,\r\n          y0: 0,\r\n          x1: 25,\r\n          y1: 25,\r\n        },\r\n      ],\r\n      width: 700,\r\n      height: 700,\r\n      title: \"Calculate Pi Using the Monte Carlo Method!\",\r\n    },\r\n    revision: 0,\r\n  };\r\n\r\n  componentDidMount() {\r\n    setInterval(this.genPoints, 25);\r\n  }\r\n\r\n  inCircle(xCord, yCord) {\r\n    let radius = 12.5;\r\n    let xDiff = xCord - 12.5;\r\n    let yDiff = yCord - 12.5;\r\n    if (radius > Math.sqrt(xDiff * xDiff + yDiff * yDiff)) {\r\n      //if point is in circle\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  genX() {\r\n    //generates a random x component\r\n    return Math.random() * 25;\r\n  }\r\n\r\n  genY = () =>\r\n    //generates a random y component\r\n    {\r\n      return Math.random() * 25;\r\n    };\r\n\r\n  toggleGen = () => {\r\n    this.setState({\r\n      generating: !this.state.generating,\r\n    });\r\n  };\r\n\r\n  genPoints = () => {\r\n    if (this.state.generating) {\r\n      const { x, y, layout } = this.state;\r\n      let randX = this.genY(); //this will still gen something in x\r\n      let randY = this.genY();\r\n      if (this.inCircle(randX, randY)) {\r\n        //point is in circle and square\r\n        this.setState({\r\n          inCirclePoints: this.state.inCirclePoints + 1,\r\n          inSquarePoints: this.state.inSquarePoints + 1,\r\n        });\r\n      } else {\r\n        //point is not in circle\r\n        this.setState({\r\n          inSquarePoints: this.state.inSquarePoints + 1,\r\n        });\r\n      }\r\n      x.push(this.genY());\r\n      y.push(this.genY());\r\n      this.setState({ revision: this.state.revision + 1 });\r\n      layout.datarevision = this.state.revision + 1;\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"center\">\r\n        <Plot\r\n          data={[\r\n            {\r\n              x: this.state.x,\r\n              y: this.state.y,\r\n              type: \"pointcloud\",\r\n            },\r\n          ]}\r\n          layout={this.state.layout}\r\n          revision={this.state.revision}\r\n        />\r\n        <Value\r\n          inSquarePoints={this.state.inSquarePoints}\r\n          inCirclePoints={this.state.inCirclePoints}\r\n        />\r\n        <button\r\n          onClick={() => {\r\n            this.toggleGen();\r\n          }}\r\n        >\r\n          Start/Stop\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport PlotlyComp from \"./Components/PlotlyComp\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <PlotlyComp />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}